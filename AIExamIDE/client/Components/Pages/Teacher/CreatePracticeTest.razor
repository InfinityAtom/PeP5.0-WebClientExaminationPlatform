@page "/teacher/practice-tests/create"
@layout PortalLayout
@using MudBlazor
@inject AIExamIDE.Services.ApiClient Api
@inject AIExamIDE.Services.AuthState Auth
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
  <MudStack Spacing="3">
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
      <MudText Typo="Typo.h4">Create Practice Test</MudText>
      <MudStack Row Spacing="1">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="BackToList">Back</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!CanSave)" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveTest">Save Test</MudButton>
      </MudStack>
    </MudStack>

    <MudPaper Elevation="1" Class="pa-4">
      <MudStack Spacing="3">
        <MudTextField @bind-Value="Title" Label="Title" Required="true" Immediate="true" OnBlur="Validate" />
        <MudSelect T="string" @bind-Value="Type" Label="Test Type" Required="true" Immediate="true" OnBlur="Validate">
          <MudSelectItem Value="@("mcq")">Multiple Choice (MCQ)</MudSelectItem>
          <MudSelectItem Value="@("ide")">IDE Programming</MudSelectItem>
        </MudSelect>
        <MudTextField @bind-Value="Prompt" Lines="4" Label="Instructions / Prompt" Variant="Variant.Outlined" Immediate="true" />

        @if (Type == "mcq")
        {
          <MudDivider />
          <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h5">Questions (@Questions.Count)</MudText>
            <MudStack Row Spacing="1">
              <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddQuestion" Color="Color.Primary" Variant="Variant.Filled">Add Question</MudButton>
              <MudButton StartIcon="@Icons.Material.Filled.AutoFixHigh" Disabled="@(!Questions.Any())" OnClick="GenerateBasicFeedback" Color="Color.Info" Variant="Variant.Outlined">Analyze</MudButton>
            </MudStack>
          </MudStack>
          @if (!Questions.Any())
          {
            <MudAlert Severity="Severity.Info">No questions yet. Click "Add Question".</MudAlert>
          }
          else
          {
            <MudExpansionPanels MultiExpansion="true">
              @foreach (var (q, idx) in Questions.Select((q,i)=>(q,i)))
              {
                <MudExpansionPanel Text="@($"Question {idx+1}")" Icon="@Icons.Material.Filled.Help">
                  <MudStack Spacing="2">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                      <MudTextField @bind-Value="q.Text" Label="Question Text" Lines="2" Variant="Variant.Outlined" Immediate="true" />
                      <MudStack Row Spacing="1">
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" Color="Color.Info" OnClick="@(() => DuplicateQuestion(idx))" />
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" Disabled="@(idx==0)" OnClick="@(() => MoveQuestionUp(idx))" />
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" Disabled="@(idx==Questions.Count-1)" OnClick="@(() => MoveQuestionDown(idx))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => RemoveQuestion(idx))" />
                      </MudStack>
                    </MudStack>
                    <MudStack Row Spacing="2">
                      <MudSelect T="string" Value="@q.QuestionType" Label="Type" Style="width:140px" Immediate="true" ValueChanged="@(val => { q.QuestionType = val; OnQuestionTypeChanged(q); })">
                        <MudSelectItem Value="@("single")">Single</MudSelectItem>
                        <MudSelectItem Value="@("multiple")">Multiple</MudSelectItem>
                        <MudSelectItem Value="@("truefalse")">True/False</MudSelectItem>
                      </MudSelect>
                      <MudNumericField T="int" @bind-Value="q.Points" Label="Points" Min="0" Style="width:110px" Immediate="true" OnBlur="Validate" />
                      <MudNumericField T="int" @bind-Value="q.Penalty" Label="Penalty" Min="0" Style="width:110px" Immediate="true" OnBlur="Validate" />
                    </MudStack>
                    <MudText Typo="Typo.subtitle2">Answer Options</MudText>
                    @if (q.QuestionType == "single" || q.QuestionType == "truefalse")
                    {
                      <MudRadioGroup T="int" @bind-SelectedOption="q.CorrectAnswer">
                        @for (int i=0;i<q.Options.Count;i++)
                        {
                          var optIndex = i;
                          <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                            <MudRadio T="int" Value="@optIndex" />
                            <MudTextField @bind-Value="q.Options[optIndex]" Label="@($"Option {(char)('A'+optIndex)}")" Style="flex:1" Immediate="true" />
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Disabled="@(q.Options.Count<=2 || q.QuestionType=="truefalse")" OnClick="@(() => RemoveOption(q,optIndex))" />
                          </MudStack>
                        }
                      </MudRadioGroup>
                    }
                    else if (q.QuestionType == "multiple")
                    {
                      @for (int i=0;i<q.Options.Count;i++)
                      {
                        var optIndex = i;
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                          <MudCheckBox T="bool" Value="@q.CorrectAnswers.Contains(optIndex)" ValueChanged="@((bool v) => ToggleCorrectMultiple(q,optIndex, v))" Ripple="false" />
                          <MudTextField @bind-Value="q.Options[optIndex]" Label="@($"Option {(char)('A'+optIndex)}")" Style="flex:1" Immediate="true" />
                          <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Disabled="@(q.Options.Count<=2)" OnClick="@(() => RemoveOption(q,optIndex))" />
                        </MudStack>
                      }
                      <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@(q.Options.Count>=8)" OnClick="@(() => AddOption(q))" Variant="Variant.Outlined" Size="Size.Small">Add Option</MudButton>
                    }
                  </MudStack>
                </MudExpansionPanel>
              }
            </MudExpansionPanels>
          }
        }
        else if (Type == "ide")
        {
          <MudDivider />
          <MudText Typo="Typo.h5">IDE Test Configuration</MudText>
          <MudTextField @bind-Value="StarterCode" Label="Starter Code (optional)" Lines="10" Variant="Variant.Outlined" Placeholder="Provide starter code or leave empty." Immediate="true" />
          <MudTextField @bind-Value="EvaluationNotes" Label="Evaluation Notes (optional)" Lines="4" Variant="Variant.Outlined" Placeholder="Notes about grading or evaluation criteria." Immediate="true" />
        }
      </MudStack>
    </MudPaper>

    <MudGrid Class="mt-4">
      <MudItem xs="12" md="6">
        <MudPaper Elevation="1" Class="pa-3">
          <MudText Typo="Typo.h6">Live Preview</MudText>
          <MudDivider Class="mb-2" />
          <MudText Typo="Typo.subtitle1">@Title</MudText>
          <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">@Type.ToUpper()</MudChip>
          @if (!string.IsNullOrWhiteSpace(Prompt))
          {
            <MudText Typo="Typo.body2" Class="mt-2">@TrimPreview(Prompt, 300)</MudText>
          }
          @if (Type == "mcq")
          {
            <MudText Typo="Typo.caption" Class="mt-2">Questions: @Questions.Count</MudText>
            <MudText Typo="Typo.caption">Total Points: @Questions.Sum(q=>q.Points)</MudText>
          }
          else if (Type == "ide")
          {
            <MudText Typo="Typo.caption" Class="mt-2">Starter code length: @StarterCode.Length chars</MudText>
          }
        </MudPaper>
      </MudItem>
      <MudItem xs="12" md="6">
        <MudPaper Elevation="1" Class="pa-3">
          <MudText Typo="Typo.h6">Validation</MudText>
          <MudDivider Class="mb-2" />
          @if (!ValidationMessages.Any())
          {
            <MudAlert Severity="Severity.Success">All good! Ready to save.</MudAlert>
          }
          else
          {
            <MudList T="string" Dense="true">
              @foreach (var msg in ValidationMessages)
              {
                <MudListItem T="string">
                  <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Class="mr-2" /> @msg
                </MudListItem>
              }
            </MudList>
          }
        </MudPaper>
      </MudItem>
    </MudGrid>
  </MudStack>
</MudContainer>

@code {
  private string Title = "";
  private string Type = "mcq";
  private string Prompt = "";
  private List<McqQuestion> Questions = new();
  private string StarterCode = "";
  private string EvaluationNotes = "";
  private List<string> ValidationMessages = new();

  public class McqQuestion {
    public string Text { get; set; } = "";
    public string QuestionType { get; set; } = "single"; // single | multiple | truefalse
    public List<string> Options { get; set; } = new(){"","","",""};
    public int CorrectAnswer { get; set; } = 0; // for single/truefalse
    public List<int> CorrectAnswers { get; set; } = new(); // for multiple
    public int Points { get; set; } = 1;
    public int Penalty { get; set; } = 0;
  }

  protected override async Task OnInitializedAsync() {
    await Auth.InitializeAsync();
    if (!Auth.IsTeacher) { Nav.NavigateTo("/login"); return; }
    Validate();
  }

  private void BackToList() => Nav.NavigateTo("/teacher/practice-tests");
  private void AddQuestion() { Questions.Add(new McqQuestion()); Validate(); }
  private void RemoveQuestion(int index) { if(index>=0 && index<Questions.Count) Questions.RemoveAt(index); Validate(); }
  private void DuplicateQuestion(int index){ if(index>=0 && index<Questions.Count){ var o=Questions[index]; Questions.Insert(index+1,new McqQuestion{ Text=o.Text, QuestionType=o.QuestionType, Options=o.Options.ToList(), CorrectAnswer=o.CorrectAnswer, CorrectAnswers=o.CorrectAnswers.ToList(), Points=o.Points, Penalty=o.Penalty}); } Validate(); }
  private void MoveQuestionUp(int index){ if(index>0){ var q=Questions[index]; Questions.RemoveAt(index); Questions.Insert(index-1,q);} }
  private void MoveQuestionDown(int index){ if(index<Questions.Count-1){ var q=Questions[index]; Questions.RemoveAt(index); Questions.Insert(index+1,q);} }
  private void AddOption(McqQuestion q){ if(q.Options.Count<8){ q.Options.Add(""); } }
  private void RemoveOption(McqQuestion q,int idx){ if(q.Options.Count>2 && idx>=0 && idx<q.Options.Count){ q.Options.RemoveAt(idx); q.CorrectAnswers.Remove(idx); for(int i=0;i<q.CorrectAnswers.Count;i++){ if(q.CorrectAnswers[i]>idx) q.CorrectAnswers[i]--; } } }
  private void OnQuestionTypeChanged(McqQuestion q){ if(q.QuestionType=="truefalse"){ q.Options = new List<string>{"True","False"}; q.CorrectAnswers.Clear(); q.CorrectAnswer = 0; } else if(q.QuestionType=="multiple") { if(q.Options.Count<2) q.Options = new List<string>{"Option A","Option B"}; q.CorrectAnswers.Clear(); } else { if(q.Options.Count<2) q.Options = new List<string>{"Option A","Option B"}; q.CorrectAnswers.Clear(); q.CorrectAnswer = 0; } Validate(); }
  private void GenerateBasicFeedback(){ var empties=Questions.Count(q=>string.IsNullOrWhiteSpace(q.Text)); var blankOpts=Questions.Sum(q=>q.Options.Count(o=>string.IsNullOrWhiteSpace(o))); Snackbar.Add($"Analysis: {empties} empty question(s), {blankOpts} blank option(s).", (empties+blankOpts)==0?Severity.Success:Severity.Warning); }
  private void ToggleCorrectMultiple(McqQuestion q,int index,bool isChecked){ if(isChecked){ if(!q.CorrectAnswers.Contains(index)) q.CorrectAnswers.Add(index);} else { q.CorrectAnswers.Remove(index);} }
  private void Validate(){ ValidationMessages.Clear(); if(string.IsNullOrWhiteSpace(Title)) ValidationMessages.Add("Title is required."); if(Type=="mcq"){ if(!Questions.Any()) ValidationMessages.Add("At least one question required for MCQ test."); for(int i=0;i<Questions.Count;i++){ var q=Questions[i]; if(string.IsNullOrWhiteSpace(q.Text)) ValidationMessages.Add($"Question {i+1} text empty."); if(q.Options.Any(o=>string.IsNullOrWhiteSpace(o))) ValidationMessages.Add($"Question {i+1} has blank options."); if(q.Points<0) ValidationMessages.Add($"Question {i+1} points negative."); if(q.Penalty<0) ValidationMessages.Add($"Question {i+1} penalty negative."); if(q.Penalty>q.Points) ValidationMessages.Add($"Question {i+1} penalty exceeds points."); if(q.QuestionType=="single" || q.QuestionType=="truefalse"){ if(q.CorrectAnswer<0 || q.CorrectAnswer>=q.Options.Count) ValidationMessages.Add($"Question {i+1} correct answer invalid."); } else if(q.QuestionType=="multiple"){ if(!q.CorrectAnswers.Any()) ValidationMessages.Add($"Question {i+1} needs at least one correct answer."); if(q.CorrectAnswers.Any(a=>a<0 || a>=q.Options.Count)) ValidationMessages.Add($"Question {i+1} has invalid correct answer index."); } } } StateHasChanged(); }
  private bool CanSave => !ValidationMessages.Any();
  private async Task SaveTest(){ Validate(); if(!CanSave){ Snackbar.Add("Fix validation issues before saving.", Severity.Error); return; } try{ if(Type=="mcq"){ var created = await Api.CreatePracticeTestAsync(Title, Type, Prompt, Questions); Snackbar.Add("Practice test created successfully!", Severity.Success);} else { var payload = new { starterCode = StarterCode, evaluationNotes = EvaluationNotes }; var created = await Api.CreatePracticeTestAsync(Title, Type, Prompt, payload); Snackbar.Add("IDE practice test created successfully!", Severity.Success);} Nav.NavigateTo("/teacher/practice-tests", true);} catch(Exception ex){ Snackbar.Add($"Error saving test: {ex.Message}", Severity.Error);} }
  private string TrimPreview(string? text,int max)=> string.IsNullOrWhiteSpace(text)?"": (text.Length>max? text.Substring(0,max)+"...":text);
}