@page "/teacher/practice-tests/edit/{Id:int}"
@layout PortalLayout
@using MudBlazor
@inject AIExamIDE.Services.ApiClient Api
@inject AIExamIDE.Services.AuthState Auth
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
  <MudStack Spacing="3">
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
      <MudText Typo="Typo.h4">Edit Practice Test</MudText>
      <MudStack Row Spacing="1">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="BackToList">Back</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!CanSave || Loading)" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveTest">Save Changes</MudButton>
      </MudStack>
    </MudStack>

    @if (Loading)
    {
      <MudProgressLinear Indeterminate="true" />
    }
    else
    {
      <MudPaper Elevation="1" Class="pa-4">
        <MudStack Spacing="3">
          <MudTextField @bind-Value="Title" Label="Title" Required="true" Immediate="true" OnBlur="Validate" />
          <MudSelect T="string" @bind-Value="Type" Label="Test Type" Required="true" Disabled="true">
            <MudSelectItem Value="@("mcq")">Multiple Choice (MCQ)</MudSelectItem>
            <MudSelectItem Value="@("ide")">IDE Programming</MudSelectItem>
          </MudSelect>
          <MudTextField @bind-Value="Prompt" Lines="5" Placeholder="Explain the test to students..." Variant="Variant.Outlined" Immediate="true" />

          @if (Type == "mcq")
          {
            <MudDivider />
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
              <MudText Typo="Typo.h5">Questions (@Questions.Count)</MudText>
              <MudStack Row Spacing="1">
                <MudButton StartIcon="@Icons.Material.Filled.NoteAdd" OnClick="AddQuestion" Color="Color.Primary" Variant="Variant.Filled">Add Question</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.AutoFixHigh" Disabled="@(!Questions.Any())" OnClick="GenerateBasicFeedback" Color="Color.Info" Variant="Variant.Outlined">Analyze</MudButton>
              </MudStack>
            </MudStack>
            @if (!Questions.Any())
            {
              <MudAlert Severity="Severity.Info">No questions yet. Click "Add Question".</MudAlert>
            }
            else
            {
              <MudExpansionPanels MultiExpansion="true">
                @foreach (var tuple in Questions.Select((q,i)=>(q,i)))
                {
                  var q = tuple.q; var idx = tuple.i;
                  <MudExpansionPanel Text="@($"Question {idx+1}")" Icon="@Icons.Material.Filled.Help">
                    <MudStack Spacing="2">
                      <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudTextField @bind-Value="q.Text" Label="Question Text" Lines="2" Variant="Variant.Outlined" Immediate="true" />
                        <MudStack Row Spacing="1">
                          <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" Color="Color.Info" OnClick="@(() => DuplicateQuestion(idx))" />
                          <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" Disabled="@(idx==0)" OnClick="@(() => MoveQuestionUp(idx))" />
                          <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" Disabled="@(idx==Questions.Count-1)" OnClick="@(() => MoveQuestionDown(idx))" />
                          <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => RemoveQuestion(idx))" />
                        </MudStack>
                      </MudStack>
                      <MudDivider />
                      <MudText Typo="Typo.subtitle2">Answer Options</MudText>
                      @for (int i=0;i<q.Options.Count;i++)
                      {
                        var optIndex = i;
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                          <MudRadio T="int" Value="@optIndex" @bind-SelectedOption="q.CorrectAnswer" />
                          <MudTextField @bind-Value="q.Options[optIndex]" Label="@($"Option {(char)('A'+optIndex)}")" Style="flex:1" Immediate="true" />
                          <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Disabled="@(q.Options.Count<=2)" OnClick="@(() => RemoveOption(q,optIndex))" />
                        </MudStack>
                      }
                      <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@(q.Options.Count>=8)" OnClick="@(() => AddOption(q))" Variant="Variant.Outlined" Size="Size.Small">Add Option</MudButton>
                    </MudStack>
                  </MudExpansionPanel>
                }
              </MudExpansionPanels>
            }
          }
          else if (Type == "ide")
          {
            <MudDivider />
            <MudText Typo="Typo.h5">IDE Test Configuration</MudText>
            <MudTextField @bind-Value="StarterCode" Label="Starter Code (optional)" Lines="10" Variant="Variant.Outlined" Placeholder="Provide starter code or leave empty." Immediate="true" />
            <MudTextField @bind-Value="EvaluationNotes" Label="Evaluation Notes (optional)" Lines="4" Variant="Variant.Outlined" Placeholder="Notes about grading or evaluation criteria." Immediate="true" />
          }
        </MudStack>
      </MudPaper>

      <MudGrid Class="mt-4">
        <MudItem xs="12" md="6">
          <MudPaper Elevation="1" Class="pa-3">
            <MudText Typo="Typo.h6">Live Preview</MudText>
            <MudDivider Class="mb-2" />
            <MudText Typo="Typo.subtitle1">@Title</MudText>
            <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">@Type.ToUpper()</MudChip>
            @if (!string.IsNullOrWhiteSpace(Prompt))
            {
              <MudText Typo="Typo.body2" Class="mt-2">@TrimPreview(Prompt, 300)</MudText>
            }
            @if (Type == "mcq")
            {
              <MudText Typo="Typo.caption" Class="mt-2">Questions: @Questions.Count</MudText>
            }
            else if (Type == "ide")
            {
              <MudText Typo="Typo.caption" Class="mt-2">Starter code length: @StarterCode.Length chars</MudText>
            }
          </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6">
          <MudPaper Elevation="1" Class="pa-3">
            <MudText Typo="Typo.h6">Validation</MudText>
            <MudDivider Class="mb-2" />
            @if (!ValidationMessages.Any())
            {
              <MudAlert Severity="Severity.Success">All good! Ready to save.</MudAlert>
            }
            else
            {
              <MudList T="string" Dense="true">
                @foreach (var msg in ValidationMessages)
                {
                  <MudListItem T="string">
                    <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Class="mr-2" /> @msg
                  </MudListItem>
                }
              </MudList>
            }
          </MudPaper>
        </MudItem>
      </MudGrid>
    }
  </MudStack>
</MudContainer>

@code {
  [Parameter] public int Id { get; set; }
  private bool Loading = true;
  private string Title = "";
  private string Type = "mcq";
  private string Prompt = "";
  private List<McqQuestion> Questions = new();
  private string StarterCode = "";
  private string EvaluationNotes = "";
  private List<string> ValidationMessages = new();

  public class McqQuestion { public string Text { get; set; } = ""; public List<string> Options { get; set; } = new(){"","","",""}; public int CorrectAnswer { get; set; } = 0; }

  protected override async Task OnInitializedAsync() {
    await Auth.InitializeAsync();
    if (!Auth.IsTeacher) { Nav.NavigateTo("/login"); return; }
    await LoadTest();
  }

  private async Task LoadTest(){
    try{
      Loading = true;
      var test = await Api.GetPracticeTestAsync(Id);
      Title = test.Title; Type = test.Type; Prompt = test.Prompt ?? "";
      if(Type=="mcq" && !string.IsNullOrEmpty(test.ContentJson)){
        try { var q = System.Text.Json.JsonSerializer.Deserialize<List<McqQuestion>>(test.ContentJson); if(q!=null) Questions = q; } catch {}
      }
      // For IDE tests we expect JSON object with optional fields; leave as blank for now (could parse future schema)
      Validate();
    } catch(Exception ex){ Snackbar.Add($"Error loading test: {ex.Message}", Severity.Error); }
    finally{ Loading = false; StateHasChanged(); }
  }

  private void BackToList() => Nav.NavigateTo("/teacher/practice-tests");
  private void AddQuestion() { Questions.Add(new McqQuestion()); Validate(); }
  private void RemoveQuestion(int index) { if(index>=0 && index<Questions.Count) Questions.RemoveAt(index); Validate(); }
  private void DuplicateQuestion(int index){ if(index>=0 && index<Questions.Count) { var original = Questions[index]; Questions.Insert(index+1, new McqQuestion{ Text=original.Text, Options=original.Options.ToList(), CorrectAnswer=original.CorrectAnswer}); } Validate(); }
  private void MoveQuestionUp(int index){ if(index>0){ var q=Questions[index]; Questions.RemoveAt(index); Questions.Insert(index-1,q);} }
  private void MoveQuestionDown(int index){ if(index<Questions.Count-1){ var q=Questions[index]; Questions.RemoveAt(index); Questions.Insert(index+1,q);} }
  private void AddOption(McqQuestion q){ if(q.Options.Count<8){ q.Options.Add(""); } }
  private void RemoveOption(McqQuestion q,int idx){ if(q.Options.Count>2 && idx>=0 && idx<q.Options.Count){ q.Options.RemoveAt(idx);} }
  private void GenerateBasicFeedback(){ var emptyQuestions = Questions.Count(q => string.IsNullOrWhiteSpace(q.Text)); var optionsWithBlanks = Questions.Sum(q => q.Options.Count(o => string.IsNullOrWhiteSpace(o))); Snackbar.Add($"Analysis: {emptyQuestions} empty question(s), {optionsWithBlanks} empty option(s).", emptyQuestions+optionsWithBlanks==0?Severity.Success:Severity.Warning); }
  private void Validate(){ ValidationMessages.Clear(); if(string.IsNullOrWhiteSpace(Title)) ValidationMessages.Add("Title is required."); if(Type=="mcq") { if(!Questions.Any()) ValidationMessages.Add("At least one question required for MCQ test."); for(int i=0;i<Questions.Count;i++){ var q=Questions[i]; if(string.IsNullOrWhiteSpace(q.Text)) ValidationMessages.Add($"Question {i+1} text is empty."); if(q.Options.Any(o => string.IsNullOrWhiteSpace(o))) ValidationMessages.Add($"Question {i+1} has blank option(s)."); if(q.CorrectAnswer <0 || q.CorrectAnswer>=q.Options.Count) ValidationMessages.Add($"Question {i+1} correct answer index invalid."); } } }
  private bool CanSave => !ValidationMessages.Any();
  private async Task SaveTest(){ Validate(); if(!CanSave){ Snackbar.Add("Fix validation issues before saving.", Severity.Error); return; } try{ if(Type=="mcq"){ var updated = await Api.UpdatePracticeTestAsync(Id, new AIExamIDE.Models.PracticeTest{ Id=Id, Title=Title, Type=Type, Prompt=Prompt, ContentJson=System.Text.Json.JsonSerializer.Serialize(Questions)}); } else { var payload = new { starterCode = StarterCode, evaluationNotes = EvaluationNotes }; var updated = await Api.UpdatePracticeTestAsync(Id, new AIExamIDE.Models.PracticeTest{ Id=Id, Title=Title, Type=Type, Prompt=Prompt, ContentJson = System.Text.Json.JsonSerializer.Serialize(payload)}); } Snackbar.Add("Practice test updated successfully!", Severity.Success); Nav.NavigateTo("/teacher/practice-tests", true); } catch(Exception ex){ Snackbar.Add($"Error saving test: {ex.Message}", Severity.Error); } }
  private string TrimPreview(string? text,int max){ if(string.IsNullOrWhiteSpace(text)) return ""; return text.Length>max? text.Substring(0,max)+"..." : text; }
}